<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

  <ResourceDictionary.MergedDictionaries>

    <ResourceDictionary
      Source="Fonts.xaml" />

  </ResourceDictionary.MergedDictionaries>

  <Style
    x:Key="SideButton"
    TargetType="ToggleButton">
    <Setter
      Property="Background"
      Value="{DynamicResource AccentColorBrush}" />
    <Setter
      Property="Foreground"
      Value="{DynamicResource IdealForegroundColorBrush}" />
    <Setter
      Property="FontSize"
      Value="18" />
    <Setter
      Property="Padding"
      Value="24 6 24 12" />
    <Setter
      Property="BorderThickness"
      Value="0" />
    <Setter
      Property="Margin"
      Value="-1 0 0 0" />
    <Setter
      Property="HorizontalAlignment"
      Value="Left" />
    <Setter
      Property="VerticalAlignment"
      Value="Center" />
    <Setter
      Property="LayoutTransform">
      <Setter.Value>
        <RotateTransform
          Angle="270" />
      </Setter.Value>
    </Setter>
    <Setter
      Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type ToggleButton}">
          <Border
            x:Name="Border"
            Margin="0"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              Margin="{TemplateBinding Padding}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              RecognizesAccessKey="True" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger
              Property="IsPressed"
              Value="True">
              <Setter
                Property="Background"
                Value="{DynamicResource FlatButtonPressedBackgroundBrush}"
                TargetName="Border" />
              <Setter
                Property="Foreground"
                Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
            </Trigger>
            <Trigger
              Property="IsEnabled"
              Value="False">
              <Setter
                Property="Foreground"
                Value="{DynamicResource GrayBrush2}" />
            </Trigger>
            <Trigger
              Property="IsMouseOver"
              Value="True">
              <!--<Setter
                Property="Background"
                Value="DarkGray" />-->
            </Trigger>
            <Trigger
              Property="IsMouseOver"
              Value="False">
              <Setter
                Property="Height"
                Value="12" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style
    x:Key="MetroListBoxItem"
    TargetType="ListBoxItem">

    <Setter
      Property="Padding"
      Value="3" />

    <Setter
      Property="HorizontalContentAlignment"
      Value="Stretch" />

    <Setter
      Property="VerticalContentAlignment"
      Value="Stretch" />

    <Setter
      Property="Template">

      <Setter.Value>

        <ControlTemplate
          TargetType="{x:Type ListBoxItem}">
          <Border
            x:Name="Border"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <ContentPresenter
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger
              Property="IsSelected"
              Value="True">
              <Setter
                TargetName="Border"
                Property="Background"
                Value="{DynamicResource AccentColorBrush3}" />
              <Setter
                Property="Foreground"
                Value="{DynamicResource AccentSelectedColorBrush}" />
            </Trigger>
            <Trigger
              Property="IsMouseOver"
              Value="True">
              <Setter
                TargetName="Border"
                Property="Background"
                Value="{DynamicResource AccentColorBrush4}" />
            </Trigger>
            <Trigger
              Property="IsEnabled"
              Value="False">
              <Setter
                Property="Foreground"
                Value="{DynamicResource GrayBrush7}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition
                  Property="IsEnabled"
                  Value="False" />
                <Condition
                  Property="IsSelected"
                  Value="True" />
              </MultiTrigger.Conditions>
              <Setter
                TargetName="Border"
                Property="Background"
                Value="{DynamicResource GrayBrush7}" />
              <Setter
                Property="Foreground"
                Value="{DynamicResource AccentSelectedColorBrush}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition
                  Property="IsSelected"
                  Value="True" />
                <Condition
                  Property="Selector.IsSelectionActive"
                  Value="True" />
              </MultiTrigger.Conditions>
              <Setter
                TargetName="Border"
                Property="Background"
                Value="{DynamicResource AccentColorBrush3}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>

    </Setter>

  </Style>

  <Style
    x:Key="NotSelectableMetroListBoxItem"
    TargetType="ListBoxItem">

    <Setter
      Property="Padding"
      Value="3" />

    <Setter
      Property="Background"
      Value="{DynamicResource GrayBrush8}" />

    <Setter
      Property="HorizontalContentAlignment"
      Value="Stretch" />
    <Setter
      Property="VerticalContentAlignment"
      Value="Stretch" />

    <Setter
      Property="Template">

      <Setter.Value>

        <ControlTemplate
          TargetType="{x:Type ListBoxItem}">
          <Border
            x:Name="Border"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <ContentPresenter
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>

      </Setter.Value>

    </Setter>

  </Style>

  <Style
    TargetType="ListBoxItem"
    BasedOn="{StaticResource MetroListBoxItem}" />

  <Style
    x:Key="LinkButton"
    BasedOn="{StaticResource Small}"
    TargetType="TextBlock">

    <Setter
      Property="Foreground"
      Value="{DynamicResource AccentColorBrush}" />


    <Style.Triggers>
      <Trigger
        Property="IsMouseOver"
        Value="True">
        <Setter
          Property="Cursor"
          Value="Hand" />
      </Trigger>
      <Trigger
        Property="IsMouseOver"
        Value="True">
        <Setter
          Property="Foreground"
          Value="{DynamicResource HighlightBrush}" />
      </Trigger>
    </Style.Triggers>

  </Style>

  <Style
    TargetType="{x:Type xctk:ButtonSpinner}">
    <Setter
      Property="Background"
      Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter
      Property="Foreground"
      Value="{DynamicResource TextBrush}" />
    <Setter
      Property="BorderBrush"
      Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter
      Property="BorderThickness"
      Value="1" />
    <Setter
      Property="Focusable"
      Value="False" />
    <Setter
      Property="HorizontalContentAlignment"
      Value="Stretch" />
    <Setter
      Property="IsTabStop"
      Value="True" />
    <Setter
      Property="Padding"
      Value="1" />
    <Setter
      Property="VerticalContentAlignment"
      Value="Center" />
    <Setter
      Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type xctk:ButtonSpinner}">
          <Border
            x:Name="Border"
            SnapsToDevicePixels="True"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition
                  x:Name="firstContentColumn"
                  Width="*" />
                <ColumnDefinition
                  x:Name="secondContentColumn"
                  Width="Auto" />
              </Grid.ColumnDefinitions>

              <ContentPresenter
                x:Name="contentPresenter"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Focusable="False"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

              <Grid
                x:Name="gridContent"
                Grid.Column="1"
                Visibility="{TemplateBinding ShowButtonSpinner, Converter={StaticResource BoolToVisibility}}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition
                    Width="20" />
                  <ColumnDefinition
                    Width="20" />
                </Grid.ColumnDefinitions>

                <RepeatButton
                  x:Name="PART_IncreaseButton"
                  Grid.Column="0"
                  Margin="2,2,0,2"
                  Foreground="{TemplateBinding Foreground}"
                  Style="{DynamicResource ChromelessButtonStyle}"
                  IsTabStop="{TemplateBinding IsTabStop}">
                  <Path
                    x:Name="PolygonUp"
                    Width="14"
                    Height="14"
                    Stretch="Fill"
                    Fill="{DynamicResource GrayBrush1}"
                    Data="F1 M 35,19L 41,19L 41,35L 57,35L 57,41L 41,41L 41,57L 35,57L 35,41L 19,41L 19,35L 35,35L 35,19 Z " />
                </RepeatButton>

                <RepeatButton
                  x:Name="PART_DecreaseButton"
                  Grid.Column="1"
                  Margin="0,2,2,2"
                  Foreground="{TemplateBinding Foreground}"
                  Style="{DynamicResource ChromelessButtonStyle}"
                  IsTabStop="{TemplateBinding IsTabStop}">
                  <Path
                    x:Name="PolygonDown"
                    Width="14"
                    Height="3"
                    Stretch="Fill"
                    Fill="{DynamicResource GrayBrush1}"
                    Data="F1 M 19,38L 57,38L 57,44L 19,44L 19,38 Z " />
                </RepeatButton>

              </Grid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger
              Property="IsMouseOver"
              Value="True"
              SourceName="PART_IncreaseButton">
              <Setter
                TargetName="PART_IncreaseButton"
                Property="Background"
                Value="{DynamicResource GrayBrush8}" />
              <Setter
                TargetName="PolygonUp"
                Property="Fill"
                Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger
              Property="IsPressed"
              Value="True"
              SourceName="PART_IncreaseButton">
              <Setter
                TargetName="PART_IncreaseButton"
                Property="Background"
                Value="{DynamicResource BlackBrush}" />
              <Setter
                TargetName="PolygonUp"
                Property="Fill"
                Value="{DynamicResource WhiteBrush}" />
            </Trigger>
            <Trigger
              Property="IsMouseOver"
              Value="True"
              SourceName="PART_DecreaseButton">
              <Setter
                TargetName="PART_DecreaseButton"
                Property="Background"
                Value="{DynamicResource GrayBrush8}" />
              <Setter
                TargetName="PolygonDown"
                Property="Fill"
                Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger
              Property="IsPressed"
              Value="True"
              SourceName="PART_DecreaseButton">
              <Setter
                TargetName="PART_DecreaseButton"
                Property="Background"
                Value="{DynamicResource BlackBrush}" />
              <Setter
                TargetName="PolygonDown"
                Property="Fill"
                Value="{DynamicResource WhiteBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style
    TargetType="{x:Type xctk:TimePicker}">
    <Setter
      Property="Background"
      Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter
      Property="Foreground"
      Value="{DynamicResource TextBrush}" />
    <Setter
      Property="BorderBrush"
      Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter
      Property="BorderThickness"
      Value="1,1,0,1" />
    <Setter
      Property="Focusable"
      Value="False" />
    <Setter
      Property="HorizontalContentAlignment"
      Value="Left" />
    <Setter
      Property="VerticalContentAlignment"
      Value="Center" />
    <Setter
      Property="TextAlignment"
      Value="Right" />
    <Setter
      Property="FontFamily"
      Value="{DynamicResource ContentFontFamily}" />
    <Setter
      Property="FontSize"
      Value="{DynamicResource ContentFontSize}" />
    <Setter
      Property="WatermarkTemplate">
      <Setter.Value>
        <DataTemplate>
          <ContentControl
            Content="{Binding}"
            Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
            Focusable="False"
            Margin="0,0,3,0" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter
      Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type xctk:TimePicker}">
          <Grid
            x:Name="root">
            <Grid.ColumnDefinitions>
              <ColumnDefinition
                Width="*" />
              <ColumnDefinition
                Width="Auto" />
            </Grid.ColumnDefinitions>
            <xctk:ButtonSpinner
              x:Name="PART_Spinner"
              AllowSpin="{TemplateBinding AllowSpin}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
              Background="{TemplateBinding Background}"
              HorizontalContentAlignment="Stretch"
              IsTabStop="False"
              ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
              VerticalContentAlignment="Stretch">
              <xctk:WatermarkTextBox
                x:Name="PART_TextBox"
                AcceptsReturn="False"
                BorderThickness="0"
                Background="Transparent"
                Foreground="{TemplateBinding Foreground}"
                FontWeight="{TemplateBinding FontWeight}"
                FontStyle="{TemplateBinding FontStyle}"
                FontStretch="{TemplateBinding FontStretch}"
                FontSize="{TemplateBinding FontSize}"
                FontFamily="{TemplateBinding FontFamily}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                IsTabStop="{TemplateBinding IsTabStop}"
                IsUndoEnabled="True"
                MinWidth="20"
                Padding="{TemplateBinding Padding}"
                TextAlignment="{TemplateBinding TextAlignment}"
                TextWrapping="NoWrap"
                Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                TabIndex="{TemplateBinding TabIndex}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                WatermarkTemplate="{TemplateBinding WatermarkTemplate}"
                Watermark="{TemplateBinding Watermark}" />
            </xctk:ButtonSpinner>
            <ToggleButton
              x:Name="_timePickerToggleButton"
              Background="White"
              Grid.Column="1"
              Focusable="False"
              IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
              <ToggleButton.IsHitTestVisible>
                <Binding
                  Path="IsOpen"
                  RelativeSource="{RelativeSource TemplatedParent}">
                  <Binding.Converter>
                    <xctk:InverseBoolConverter />
                  </Binding.Converter>
                </Binding>
              </ToggleButton.IsHitTestVisible>
              <ToggleButton.IsEnabled>
                <Binding
                  Path="IsReadOnly"
                  RelativeSource="{RelativeSource TemplatedParent}">
                  <Binding.Converter>
                    <xctk:InverseBoolConverter />
                  </Binding.Converter>
                </Binding>
              </ToggleButton.IsEnabled>
              <ToggleButton.Style>
                <Style
                  TargetType="{x:Type ToggleButton}"
                  BasedOn="{StaticResource MetroToggleButton}">
                  <Setter
                    Property="Template">
                    <Setter.Value>
                      <ControlTemplate
                        TargetType="{x:Type ToggleButton}">
                        <Grid
                          SnapsToDevicePixels="True">
                          <xctk:ButtonChrome
                            x:Name="ToggleButtonChrome"
                            BorderThickness="0 1 1 1"
                            BorderBrush="{DynamicResource TextBoxBorderBrush}"
                            Background="Transparent"
                            CornerRadius="0"
                            RenderMouseOver="{TemplateBinding IsMouseOver}"
                            RenderPressed="{TemplateBinding IsPressed}"
                            RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}"
                            RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}">
                            <Grid>
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition
                                  Width="*" />
                                <ColumnDefinition
                                  Width="Auto" />
                              </Grid.ColumnDefinitions>
                              <ContentPresenter
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                HorizontalAlignment="Stretch"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="Stretch" />
                              <Grid
                                x:Name="arrowGlyph"
                                Grid.Column="1"
                                IsHitTestVisible="False"
                                Margin="5">
                                <Path
                                  x:Name="Arrow"
                                  Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "
                                  Fill="{DynamicResource GrayBrush1}"
                                  Height="4"
                                  Stretch="Uniform"
                                  Width="8" />
                              </Grid>
                            </Grid>
                          </xctk:ButtonChrome>
                        </Grid>
                        <ControlTemplate.Triggers>
                          <Trigger
                            Property="IsEnabled"
                            Value="False">
                            <Setter
                              Property="Fill"
                              TargetName="Arrow"
                              Value="#FFAFAFAF" />
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </ToggleButton.Style>
              <ToggleButton.Visibility>
                <TemplateBinding
                  Property="ShowDropDownButton">
                  <TemplateBinding.Converter>
                    <BooleanToVisibilityConverter />
                  </TemplateBinding.Converter>
                </TemplateBinding>
              </ToggleButton.Visibility>
            </ToggleButton>
            <Popup
              x:Name="PART_Popup"
              AllowsTransparency="True"
              IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}"
              StaysOpen="False"
              ToolTip="">
              <Popup.Resources>
                <Style
                  x:Key="{x:Type ToolTip}"
                  TargetType="{x:Type ToolTip}">
                  <Style.Triggers>
                    <Trigger
                      Property="Content"
                      Value="">
                      <Setter
                        Property="Visibility"
                        Value="Collapsed" />
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </Popup.Resources>
              <Border
                BorderBrush="#FFABADB3"
                BorderThickness="1"
                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                MinWidth="{Binding ActualWidth, ElementName=root}">
                <Border.Background>
                  <LinearGradientBrush
                    EndPoint="0,1"
                    StartPoint="0,0">
                    <GradientStop
                      Color="#FFF0F0F0"
                      Offset="0" />
                    <GradientStop
                      Color="#FFE5E5E5"
                      Offset="1" />
                  </LinearGradientBrush>
                </Border.Background>
                <Grid>
                  <ListBox
                    x:Name="PART_TimeListItems"
                    BorderThickness="0"
                    DisplayMemberPath="Display">
                    <ListBox.ItemContainerStyle>
                      <Style
                        TargetType="{x:Type ListBoxItem}">
                        <Setter
                          Property="Padding"
                          Value="4" />
                        <Setter
                          Property="BorderThickness"
                          Value="0" />
                        <Style.Triggers>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition
                                Property="IsMouseOver"
                                Value="True" />
                              <Condition
                                Property="IsSelected"
                                Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter
                              Property="Background"
                              Value="{DynamicResource AccentColorBrush2}" />
                          </MultiTrigger>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition
                                Property="IsMouseOver"
                                Value="False" />
                              <Condition
                                Property="IsSelected"
                                Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter
                              Property="Background"
                              Value="{DynamicResource AccentColorBrush}" />
                          </MultiTrigger>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition
                                Property="IsMouseOver"
                                Value="True" />
                              <Condition
                                Property="IsSelected"
                                Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter
                              Property="Background"
                              Value="{DynamicResource AccentColorBrush3}" />
                          </MultiTrigger>
                          
                        </Style.Triggers>
                      </Style>
                    </ListBox.ItemContainerStyle>
                  </ListBox>
                </Grid>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger
              Property="IsMouseOver"
              Value="True">
              <Setter
                Property="BorderBrush"
                Value="{DynamicResource GrayBrush1}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition
                  Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                  Value="False" />
                <Condition
                  Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}"
                  Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter
                Property="IsReadOnly"
                TargetName="PART_TextBox"
                Value="True" />
            </MultiDataTrigger>
            <DataTrigger
              Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
              Value="True">
              <Setter
                Property="IsReadOnly"
                TargetName="PART_TextBox"
                Value="True" />
            </DataTrigger>
            <Trigger
              Property="IsKeyboardFocusWithin"
              Value="True">
              <Setter
                Property="BorderBrush"
                Value="{DynamicResource GrayBrush1}" />
            </Trigger>
            <Trigger
              Property="IsEnabled"
              Value="False">
              <Setter
                Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <Trigger
              Property="IsFocused"
              Value="True">
              <Setter
                Property="FocusManager.FocusedElement"
                TargetName="PART_TextBox"
                Value="{Binding ElementName=PART_TextBox}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!--<Style
    TargetType="{x:Type xctk:TimePicker}">
    <Setter
      Property="Foreground"
      Value="{DynamicResource TextBrush}" />
    <Setter
      Property="Background"
      Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter
      Property="Controls:ControlsHelper.FocusBorderBrush"
      Value="{DynamicResource TextBoxFocusBorderBrush}" />
    <Setter
      Property="Controls:ControlsHelper.MouseOverBorderBrush"
      Value="{DynamicResource TextBoxMouseOverBorderBrush}" />
    <Setter
      Property="HorizontalContentAlignment"
      Value="Left" />
    <Setter
      Property="VerticalContentAlignment"
      Value="Center" />
    <Setter
      Property="BorderThickness"
      Value="1" />
    <Setter
      Property="Padding"
      Value="0" />
    <Setter
      Property="BorderBrush"
      Value="{DynamicResource TextBoxBorderBrush}" />
    <Setter
      Property="FontFamily"
      Value="{DynamicResource ContentFontFamily}" />
    <Setter
      Property="FontSize"
      Value="{DynamicResource ContentFontSize}" />
    <Setter
      Property="IsTabStop"
      Value="False" />
    <Setter
      Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type xctk:TimePicker}">
          <Grid
            Height="{TemplateBinding Height}"
            MinHeight="{TemplateBinding MinHeight}"
            MaxHeight="{TemplateBinding MaxHeight}"
            Margin="{TemplateBinding Padding}"
            VerticalAlignment="{TemplateBinding VerticalAlignment}">

            <Grid.Resources>
              <Style
                x:Key="comboToggleStyle"
                TargetType="{x:Type ToggleButton}">
                <Setter
                  Property="Foreground"
                  Value="{DynamicResource TextBrush}" />
                <Setter
                  Property="Background"
                  Value="{DynamicResource ControlBackgroundBrush}" />
                <Setter
                  Property="BorderBrush"
                  Value="{DynamicResource TextBoxBorderBrush}" />
                <Setter
                  Property="BorderThickness"
                  Value="1" />
                <Setter
                  Property="Padding"
                  Value="3" />
                <Setter
                  Property="Template">
                  <Setter.Value>
                    <ControlTemplate
                      TargetType="{x:Type ToggleButton}">
                      <Grid>
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup
                            x:Name="CommonStates">
                            <VisualState
                              x:Name="Normal" />
                            <VisualState
                              x:Name="MouseOver">
                              <Storyboard>
                                <DoubleAnimationUsingKeyFrames
                                  Storyboard.TargetProperty="(UIElement.Opacity)"
                                  Storyboard.TargetName="MouseOverBorder">
                                  <EasingDoubleKeyFrame
                                    Value="1"
                                    KeyTime="0" />
                                </DoubleAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState
                              x:Name="Pressed">
                              <Storyboard>
                                <DoubleAnimationUsingKeyFrames
                                  Storyboard.TargetProperty="(UIElement.Opacity)"
                                  Storyboard.TargetName="PressedBorder">
                                  <EasingDoubleKeyFrame
                                    Value="1"
                                    KeyTime="0" />
                                </DoubleAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState
                              x:Name="Disabled" />
                          </VisualStateGroup>
                          <VisualStateGroup
                            x:Name="FocusStates">
                            <VisualState
                              x:Name="Focused">
                              <Storyboard>
                                <DoubleAnimationUsingKeyFrames
                                  Storyboard.TargetProperty="(UIElement.Opacity)"
                                  Storyboard.TargetName="FocusRectangle">
                                  <EasingDoubleKeyFrame
                                    Value="1"
                                    KeyTime="0" />
                                </DoubleAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState
                              x:Name="Unfocused" />
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border
                          x:Name="Background"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}" />
                        <Rectangle
                          x:Name="DisabledVisualElement"
                          Fill="{DynamicResource WhiteBrush}"
                          IsHitTestVisible="false"
                          Opacity="0" />
                        <Border
                          x:Name="MouseOverBorder"
                          Background="{DynamicResource GrayBrush8}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Opacity="0" />
                        <Border
                          x:Name="PressedBorder"
                          Background="{DynamicResource GrayBrush7}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Opacity="0" />
                        <Rectangle
                          x:Name="FocusRectangle"
                          Stroke="{DynamicResource ComboBoxMouseOverInnerBorderBrush}"
                          Opacity="0" />
                        <Rectangle
                          x:Name="FocusVisualElement"
                          Margin="1"
                          IsHitTestVisible="false"
                          Stroke="{DynamicResource HighlightBrush}"
                          StrokeThickness="1"
                          Visibility="Collapsed" />

                        <Grid
                          Margin="1">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition
                              Width="*" />
                            <ColumnDefinition
                              Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualHeight, Mode=OneWay}" />
                          </Grid.ColumnDefinitions>

                          <Rectangle
                            x:Name="BtnArrowBackground"
                            Grid.Column="1"
                            Fill="Transparent"
                            StrokeThickness="0" />
                          <Path
                            x:Name="BtnArrow"
                            Grid.Column="1"
                            Width="8"
                            Height="4"
                            HorizontalAlignment="Center"
                            IsHitTestVisible="false"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "
                            Stretch="Uniform"
                            Fill="{DynamicResource GrayBrush1}" />
                        </Grid>
                      </Grid>
                      <ControlTemplate.Triggers>
                        <Trigger
                          Property="IsMouseOver"
                          Value="True"
                          SourceName="BtnArrowBackground">
                          <Setter
                            TargetName="BtnArrowBackground"
                            Property="Fill"
                            Value="{DynamicResource GrayBrush5}" />
                        </Trigger>

                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>

            <Rectangle
              x:Name="Base"
              Stroke="{TemplateBinding BorderBrush}"
              StrokeThickness="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessToDouble}}"
              Fill="{TemplateBinding Background}" />
            <Rectangle
              x:Name="FocusRectangle"
              Visibility="Collapsed"
              StrokeThickness="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessToDouble}}" />

            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition
                  Width="*" />
                <ColumnDefinition
                  Width="Auto" />
              </Grid.ColumnDefinitions>

              <xctk:DateTimeUpDown
                x:Name="PART_TimeUpDown"
                Padding="{TemplateBinding Padding}"
                Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                BorderThickness="0"
                BorderBrush="{x:Null}"
                Background="{x:Null}"
                Foreground="{TemplateBinding Foreground}"
                ContextMenu="{TemplateBinding ContextMenu}"
                AllowSpin="{TemplateBinding AllowSpin}"
                TabIndex="{TemplateBinding TabIndex}"
                FormatString="{TemplateBinding FormatString}"
                ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
                Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}"
                Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}"
                Watermark="{TemplateBinding Watermark}"
                WatermarkTemplate="{TemplateBinding WatermarkTemplate}"
                TextAlignment="{TemplateBinding TextAlignment}" />

              <ToggleButton
                x:Name="_timePickerToggleButton"
                Grid.Column="1"
                Focusable="False"
                IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{DynamicResource comboToggleStyle}"
                IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertBool}}" />

            </Grid>

            <Popup
              x:Name="PART_Popup"
              IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}"
              StaysOpen="False"
              PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
              Placement="Bottom">
              <Border
                BorderBrush="{DynamicResource ComboBoxPopupBrush}"
                Background="{DynamicResource WhiteBrush}"
                Effect="{DynamicResource DropShadowBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                  <ListBox
                    x:Name="PART_TimeListItems"
                    Width="150"
                    BorderThickness="0"
                    DisplayMemberPath="Display" />
                </Grid>
              </Border>
            </Popup>
          </Grid>

          <ControlTemplate.Triggers>
            <Trigger
              Property="IsFocused"
              Value="True">
              <Setter
                TargetName="PART_TimeUpDown"
                Property="FocusManager.FocusedElement"
                Value="{Binding ElementName=PART_TimeUpDown}" />
              <Setter
                TargetName="FocusRectangle"
                Property="Visibility"
                Value="Visible" />
              <Setter
                TargetName="FocusRectangle"
                Property="Stroke"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}" />
            </Trigger>
            <Trigger
              Property="IsMouseOver"
              Value="True">
              <Setter
                TargetName="FocusRectangle"
                Property="Visibility"
                Value="Visible" />
              <Setter
                TargetName="FocusRectangle"
                Property="Stroke"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.MouseOverBorderBrush)}" />
            </Trigger>
            <Trigger
              Property="IsFocused"
              Value="true"
              SourceName="PART_TimeUpDown">
              <Setter
                TargetName="FocusRectangle"
                Property="Visibility"
                Value="Visible" />
              <Setter
                TargetName="FocusRectangle"
                Property="Stroke"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->

  <Style
    BasedOn="{StaticResource MetroScrollViewer}"
    TargetType="{x:Type ScrollViewer}">
    <Setter
      Property="VerticalScrollBarVisibility"
      Value="Auto" />
    <Setter
      Property="HorizontalScrollBarVisibility"
      Value="Auto" />
    <Setter
      Property="Controls:ScrollBarHelper.VerticalScrollBarOnLeftSide"
      Value="False" />
    <Setter
      Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type ScrollViewer}">
          <Grid
            x:Name="Grid"
            Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition
                Width="*"
                x:Name="leftColumn" />
              <ColumnDefinition
                Width="Auto"
                x:Name="rightColumn" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition
                Height="*" />
              <RowDefinition
                Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter
              x:Name="PART_ScrollContentPresenter"
              CanContentScroll="{TemplateBinding CanContentScroll}"
              CanHorizontallyScroll="False"
              CanVerticallyScroll="False"
              ContentTemplate="{TemplateBinding ContentTemplate}"
              Content="{TemplateBinding Content}"
              Grid.Column="0"
              Margin="{TemplateBinding Padding}"
              Grid.Row="0"
              Grid.ColumnSpan="2"
              Grid.RowSpan="2" />
            <ScrollBar
              x:Name="PART_VerticalScrollBar"
              AutomationProperties.AutomationId="VerticalScrollBar"
              Cursor="Arrow"
              Grid.Column="1"
              Maximum="{TemplateBinding ScrollableHeight}"
              Minimum="0"
              Grid.Row="0"
              Opacity="0"
              Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
              Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
              ViewportSize="{TemplateBinding ViewportHeight}" />
            <ScrollBar
              x:Name="PART_HorizontalScrollBar"
              AutomationProperties.AutomationId="HorizontalScrollBar"
              Cursor="Arrow"
              Grid.Column="0"
              Maximum="{TemplateBinding ScrollableWidth}"
              Minimum="0"
              Orientation="Horizontal"
              Opacity="0"
              Grid.Row="1"
              Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
              Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
              ViewportSize="{TemplateBinding ViewportWidth}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger
              Property="Controls:ScrollBarHelper.VerticalScrollBarOnLeftSide"
              Value="True">
              <Setter
                TargetName="leftColumn"
                Property="Width"
                Value="Auto" />
              <Setter
                TargetName="rightColumn"
                Property="Width"
                Value="Auto" />
              <Setter
                TargetName="PART_ScrollContentPresenter"
                Property="Grid.Column"
                Value="1" />
              <Setter
                TargetName="PART_VerticalScrollBar"
                Property="Grid.Column"
                Value="0" />
            </Trigger>
            <Trigger
              Property="IsMouseOver"
              Value="True">
              <Setter
                TargetName="PART_HorizontalScrollBar"
                Property="Opacity"
                Value="0.4" />
              <Setter
                TargetName="PART_VerticalScrollBar"
                Property="Opacity"
                Value="0.4" />
            </Trigger>
            <Trigger
              SourceName="PART_HorizontalScrollBar"
              Property="IsMouseOver"
              Value="True">
              <Setter
                TargetName="PART_HorizontalScrollBar"
                Property="Opacity"
                Value="1" />
            </Trigger>
            <Trigger
              SourceName="PART_VerticalScrollBar"
              Property="IsMouseOver"
              Value="True">
              <Setter
                TargetName="PART_VerticalScrollBar"
                Property="Opacity"
                Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

  </Style>

  <Style
    TargetType="Expander"
    BasedOn="{StaticResource MetroExpander}">

    <Setter
      Property="Margin"
      Value="0 3" />
    <Setter
      Property="Background"
      Value="{DynamicResource GrayBrush8}" />
    <Setter
      Property="BorderBrush"
      Value="{DynamicResource GrayBrush8}" />

  </Style>

  <Style
    TargetType="GroupBox"
    BasedOn="{StaticResource MetroGroupBox}">

    <Setter
      Property="Background"
      Value="{DynamicResource GrayBrush8}" />
    <Setter
      Property="BorderBrush"
      Value="{DynamicResource GrayBrush8}" />

  </Style>

  <Style
    TargetType="RadioButton"
    BasedOn="{StaticResource MetroRadioButton}">

    <Setter
      Property="Margin"
      Value="0 3" />

  </Style>

  <Style
    TargetType="{x:Type Controls:ToggleSwitch}">

    <Setter
      Property="Foreground"
      Value="{DynamicResource LabelTextBrush}" />
    <Setter
      Property="FontFamily"
      Value="{DynamicResource DefaultFont}" />
    <Setter
      Property="FontSize"
      Value="{DynamicResource NormalFontSize}" />

  </Style>

  <Style
    TargetType="Button"
    x:Key="OverlayButton">
    <Setter
      Property="Background"
      Value="{DynamicResource HighlightBrush}" />
    <Setter
      Property="VerticalAlignment"
      Value="Stretch" />
    <Setter
      Property="HorizontalContentAlignment"
      Value="Stretch" />
    <Setter
      Property="VerticalContentAlignment"
      Value="Stretch" />
    <Setter
      Property="HorizontalAlignment"
      Value="Stretch" />

    <Setter
      Property="Template">
      <Setter.Value>

        <ControlTemplate
          TargetType="{x:Type Button}">
          <Grid
            x:Name="contentPresenter"
            Background="{TemplateBinding Background}"
            Opacity="0">
            <ContentPresenter
              Margin="{TemplateBinding Padding}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
              RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger
              Property="IsMouseOver"
              Value="True">
              <Setter
                TargetName="contentPresenter"
                Property="Opacity"
                Value="0.95" />
            </Trigger>
            <Trigger
              Property="IsMouseOver"
              Value="False">
              <Setter
                TargetName="contentPresenter"
                Property="Opacity"
                Value="0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style
    x:Key="PropertyHeader"
    TargetType="Label"
    BasedOn="{StaticResource MetroLabel}">

    <Setter
      Property="Margin"
      Value="0 12 0 3" />

    <Setter
      Property="Padding"
      Value="0" />

    <Setter
      Property="VerticalAlignment"
      Value="Center" />

    <Setter
      Property="HorizontalAlignment"
      Value="Left" />

    <Setter
      Property="FontFamily"
      Value="{DynamicResource DefaultFont}" />

    <Setter
      Property="FontSize"
      Value="{DynamicResource NormalFontSize}" />

    <Setter
      Property="Template">

      <Setter.Value>

        <ControlTemplate
          TargetType="Label">
          <TextBlock
            Text="{TemplateBinding Content}"
            VerticalAlignment="{TemplateBinding VerticalAlignment}"
            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
            FontFamily="{TemplateBinding FontFamily}"
            FontSize="{TemplateBinding FontSize}"
            TextTrimming="CharacterEllipsis" />
        </ControlTemplate>

      </Setter.Value>

    </Setter>

  </Style>

  <Thickness
    x:Key="GridThickness"
    Left="12"
    Top="0"
    Right="0"
    Bottom="0" />

  <Style
    x:Key="GridSplitterBase"
    TargetType="GridSplitter">

    <Setter
      Property="ShowsPreview"
      Value="True" />

    <Setter
      Property="Background"
      Value="Transparent" />

    <Style.Triggers>
      <Trigger
        Property="IsMouseOver"
        Value="True">
        <Setter
          Property="Background"
          Value="{DynamicResource AccentColorBrush}" />
      </Trigger>

    </Style.Triggers>
  </Style>

  <Style
    x:Key="HorizontalGridSplitter"
    BasedOn="{StaticResource GridSplitterBase}"
    TargetType="GridSplitter">
    <Setter
      Property="Width"
      Value="4" />
    <Setter
      Property="HorizontalAlignment"
      Value="Right" />
    <Setter
      Property="VerticalAlignment"
      Value="Stretch" />
    <Setter
      Property="ResizeDirection"
      Value="Columns" />
  </Style>

  <Style
    x:Key="VerticalGridSplitter"
    BasedOn="{StaticResource GridSplitterBase}"
    TargetType="GridSplitter">
    <Setter
      Property="Height"
      Value="4" />
    <Setter
      Property="HorizontalAlignment"
      Value="Stretch" />
    <Setter
      Property="VerticalAlignment"
      Value="Bottom" />
    <Setter
      Property="ResizeDirection"
      Value="Rows" />
  </Style>

  <Style
    TargetType="TextBox"
    x:Key="LabelLikeTextBox">
    <Setter
      Property="Background"
      Value="Transparent" />
    <Setter
      Property="FontFamily"
      Value="{DynamicResource HeaderFontFamily}" />
    <Setter
      Property="Foreground"
      Value="{DynamicResource TextBrush}" />
    <Setter
      Property="BorderThickness"
      Value="0" />
    <Setter
      Property="Padding"
      Value="0" />
    <Setter
      Property="CaretBrush"
      Value="{DynamicResource TextBrush}" />
    <Setter
      Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type TextBox}">
          <Grid
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="true">
            <ScrollViewer
              x:Name="PART_ContentHost"
              Margin="0" />
            <TextBlock
              x:Name="Message"
              Grid.Column="0"
              Text="{TemplateBinding Controls:TextBoxHelper.Watermark}"
              TextTrimming="CharacterEllipsis"
              Visibility="Collapsed"
              Margin="0"
              Opacity="0.6"
              Padding="{TemplateBinding Padding}"
              Foreground="{TemplateBinding Foreground}"
              IsHitTestVisible="False"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger
              Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}"
              Value="">
              <Setter
                TargetName="Message"
                Property="Visibility"
                Value="Visible" />
            </DataTrigger>
            <DataTrigger
              Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:TextBoxHelper.Watermark)}"
              Value="">
              <DataTrigger.EnterActions>
                <BeginStoryboard
                  Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <BeginStoryboard
                  Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
              </DataTrigger.ExitActions>
            </DataTrigger>
            <DataTrigger
              Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
              Value="True">
              <DataTrigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)">
                      <LinearDoubleKeyFrame
                        Value="0.2"
                        KeyTime="0:0:0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </BeginStoryboard>
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)">
                      <LinearDoubleKeyFrame
                        Value="0"
                        KeyTime="0:0:0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </BeginStoryboard>
              </DataTrigger.ExitActions>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style
    TargetType="ComboBoxItem"
    x:Key="LabelLikeComboBoxItem"
    BasedOn="{StaticResource MetroComboBoxItem}">
    <Setter
      Property="Padding"
      Value="10 6" />

    <Setter
      Property="Margin"
      Value="0 1" />

    <Setter
      Property="Background"
      Value="{DynamicResource AccentColorBrush4}" />

  </Style>

  <Style
    TargetType="{x:Type ComboBox}"
    x:Key="LabelLikeComboBox">
    <Setter
      Property="Foreground"
      Value="{DynamicResource TextBrush}" />
    <Setter
      Property="Background"
      Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter
      Property="HorizontalContentAlignment"
      Value="Left" />
    <Setter
      Property="VerticalContentAlignment"
      Value="Center" />
    <Setter
      Property="BorderThickness"
      Value="0" />
    <Setter
      Property="Padding"
      Value="0" />
    <Setter
      Property="FontFamily"
      Value="{DynamicResource DefaultFont}" />
    <Setter
      Property="FontSize"
      Value="{DynamicResource NormalFontSize}" />
    <Setter
      Property="ItemContainerStyle"
      Value="{DynamicResource LabelLikeComboBoxItem}" />
    <!-- change SnapsToDevicePixels to true to view a better border and validation error -->
    <Setter
      Property="SnapsToDevicePixels"
      Value="True" />
    <Setter
      Property="Validation.ErrorTemplate"
      Value="{DynamicResource ValidationErrorTemplate}" />
    <Setter
      Property="ScrollViewer.CanContentScroll"
      Value="False" />
    <Setter
      Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type ComboBox}">
          <Grid>
            <Grid.Resources>
              <Style
                x:Key="comboToggleStyle"
                TargetType="{x:Type ToggleButton}">
                <Setter
                  Property="Template">
                  <Setter.Value>
                    <ControlTemplate
                      TargetType="{x:Type ToggleButton}">
                      <Grid>
                        <Border
                          x:Name="Background"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}" />

                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition
                              Width="*" />
                            <ColumnDefinition
                              Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualHeight, Mode=OneWay}" />
                          </Grid.ColumnDefinitions>

                          <Rectangle
                            x:Name="BtnArrowBackground"
                            Grid.Column="1"
                            Fill="Transparent"
                            StrokeThickness="0" />
                          <Path
                            x:Name="BtnArrow"
                            Grid.Column="1"
                            IsHitTestVisible="false"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "
                            HorizontalAlignment="Center"
                            Height="4"
                            Stretch="Uniform"
                            Width="8"
                            Fill="{DynamicResource GrayBrush1}"
                            Visibility="Hidden" />
                        </Grid>
                      </Grid>
                      <ControlTemplate.Triggers>
                        <Trigger
                          Property="IsMouseOver"
                          Value="True">
                          <Setter
                            TargetName="BtnArrow"
                            Property="Visibility"
                            Value="Visible" />
                        </Trigger>
                        <!--<Trigger
                            Property="IsPressed"
                            Value="True">
                            <Setter
                              TargetName="Background"
                              Property="Background"
                              Value="{DynamicResource GrayBrush7}" />
                          </Trigger>-->
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup
                x:Name="FocusStates">
                <VisualState
                  x:Name="Focused" />
                <VisualState
                  x:Name="Unfocused" />
                <VisualState
                  x:Name="FocusedDropDown">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames
                      Duration="00:00:00"
                      Storyboard.TargetProperty="(UIElement.Visibility)"
                      Storyboard.TargetName="PopupBorder">
                      <DiscreteObjectKeyFrame
                        KeyTime="00:00:00">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition
                  Width="*" />
                <ColumnDefinition
                  Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualHeight, Mode=OneWay}" />
              </Grid.ColumnDefinitions>
              <ToggleButton
                x:Name="PART_DropDownToggle"
                Grid.ColumnSpan="2"
                Style="{DynamicResource comboToggleStyle}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                Foreground="{TemplateBinding Foreground}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                Margin="0"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                VerticalAlignment="Stretch"
                KeyboardNavigation.IsTabStop="False" />
              <Grid
                x:Name="ContentSite">
                <ContentPresenter
                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                  Content="{TemplateBinding SelectionBoxItem}"
                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  IsHitTestVisible="False"
                  Margin="{TemplateBinding Padding}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
              </Grid>


            </Grid>

            <!--<Border
                x:Name="FocusBorder"
                Grid.ColumnSpan="3"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{x:Null}"
                Visibility="Collapsed" />-->
            <Border
              x:Name="DisabledVisualElement"
              Grid.ColumnSpan="2"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
              BorderBrush="{DynamicResource ControlsDisabledBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Background="{DynamicResource ControlsDisabledBrush}"
              Opacity="0.6"
              IsHitTestVisible="False"
              Visibility="Collapsed" />

            <!-- AllowsTransparency="true" fixes the redraw problem under windows vista/7 with a selected non aero theme -->
            <Popup
              x:Name="PART_Popup"
              AllowsTransparency="True"
              Focusable="False"
              IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
              PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
              Placement="Bottom">
              <Grid
                MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
                <Border
                  x:Name="PopupBorder"
                  Effect="{DynamicResource DropShadowBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  HorizontalAlignment="Stretch"
                  Height="Auto"
                  BorderBrush="{DynamicResource ComboBoxPopupBrush}"
                  Background="{DynamicResource WhiteBrush}" />
                <ScrollViewer
                  x:Name="DropDownScrollViewer"
                  BorderThickness="0"
                  Margin="0 6 0 0"
                  Padding="0">
                  <ItemsPresenter
                    x:Name="ItemsPresenter"
                    KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>

            <!--<Trigger
                Property="IsMouseOver"
                Value="True">
                
                <Setter
                  TargetName="FocusBorder"
                  Property="Visibility"
                  Value="Visible" />
                <Setter
                  TargetName="FocusBorder"
                  Property="BorderBrush"
                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.MouseOverBorderBrush)}" />
                
              </Trigger>-->

            <!--<Trigger
                Property="IsFocused"
                Value="True">
                <Setter
                  TargetName="FocusBorder"
                  Property="Visibility"
                  Value="Visible" />
                <Setter
                  TargetName="FocusBorder"
                  Property="BorderBrush"
                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.FocusBorderBrush)}" />
              </Trigger>
              <Trigger
                Property="IsKeyboardFocusWithin"
                Value="True">
                <Setter
                  TargetName="FocusBorder"
                  Property="Visibility"
                  Value="Visible" />
                <Setter
                  TargetName="FocusBorder"
                  Property="BorderBrush"
                  Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.FocusBorderBrush)}" />
              </Trigger>-->

            <Trigger
              Property="IsEnabled"
              Value="False">
              <Setter
                TargetName="DisabledVisualElement"
                Property="Visibility"
                Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>